kind: "Service"
apiVersion: "v1"
metadata:
  name: {{appName}}-backend-service
spec:
  type: NodePort
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: {{appName}}
    tier: backend
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{appName}}-backend-deployment
spec:
  replicas: 1
  revisionHistoryLimit: 5
  strategy:
    type: "RollingUpdate"  
  selector:
    matchLabels:
      app: "{{appName}}"
      tier: backend
      track: stable
  template:
    metadata:
      labels:
        app: "{{appName}}"
        tier: backend
        track: stable
    spec:
      containers:
        - name: "{{appName}}-backend"
          image: "{{remoteDockerImage}}"
          envFrom:
            - configMapRef:
                name: "{{appName}}-envvars" 
          terminationMessagePath: "/tmp/my-log"   
          resources:
            requests:
              memory: 10Mi
              cpu: 50m
            limits:
              memory: 100Mi
              cpu: 200m
          livenessProbe:
            httpGet:
              path: /health
              port: external
            initialDelaySeconds: 5
            periodSeconds: 200
          readinessProbe:
            httpGet:
              path: /health
              port: external
            initialDelaySeconds: 5
            periodSeconds: 200
          ports:
            - containerPort: 8080
              name: "external"
              protocol: "TCP"
          env:
            - name: DB_USERNAME 
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: username
            - name: DB_PASSWORD 
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: password
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          command: ["/cloud_sql_proxy",
                    "-instances=smaccoun-homepage:us-central1:smaccoun-homepage=tcp:5432",
                    "-credential_file=/secrets/cloudsql/credentials.json"]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
      # [END volumes]
